---
# NOTE: _sat_quiet_assert does not impact this task, as it first needs to be ensured that it actually is
#       properly defined
- name: 'assert | Ensure boolean variables are defined properly'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __t_var) is defined"
      - "lookup('ansible.builtin.vars', __t_var) | bool | string == lookup('ansible.builtin.vars', __t_var) | string"
      - "lookup('ansible.builtin.vars', __t_var) is boolean"
    success_msg: "Variable '{{ __t_var }}' defined properly - value: '{{ lookup('ansible.builtin.vars', __t_var) }}'"
    fail_msg: "Variable '{{ __t_var }}' failed to validate"
  loop:
    - '_sat_quiet_assert'
    - '_sat_validate_certs'
  loop_control:
    loop_var: '__t_var'

- name: 'assert | Ensure string variables are defined properly'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __t_var) is defined"
      - "lookup('ansible.builtin.vars', __t_var) is string"
      - "lookup('ansible.builtin.vars', __t_var) != None"
      - "lookup('ansible.builtin.vars', __t_var) != ''"
    success_msg: "Variable '{{ __t_var }}' defined properly - value: '{{ lookup('ansible.builtin.vars', __t_var) }}'"
    fail_msg: "Variable '{{ __t_var }}' failed to validate"
    quiet: '{{ _sat_quiet_assert }}'
  loop:
    - '_sat_server_url'
  loop_control:
    loop_var: '__t_var'

- name: 'assert | Ensure Satellite server URL has a valid scheme (http/https) set'
  ansible.builtin.assert:
    that:
      - "_sat_server_url | ansible.builtin.urlsplit('scheme') is search('^https?$')"
    success_msg: 'Variable _sat_server_url has a valid scheme set.'
    fail_msg: 'Variable _sat_server_url has no valid scheme (http/https) set.'
    quiet: '{{ _sat_quiet_assert }}'

- name: 'assert | Ensure secret string variables are defined properly'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __t_var) is defined"
      - "lookup('ansible.builtin.vars', __t_var) is string"
      - "lookup('ansible.builtin.vars', __t_var) != None"
      - "lookup('ansible.builtin.vars', __t_var) != ''"
  no_log: true
  loop:
    - '_sat_username'
    - '_sat_password'
  loop_control:
    loop_var: '__t_var'

- name: 'assert | Ensure list variables are defined properly'
  ansible.builtin.assert:
    that:
      - "lookup('ansible.builtin.vars', __t_var) is defined"
      - "lookup('ansible.builtin.vars', __t_var) | list | string == lookup('ansible.builtin.vars', __t_var) | string"
      - "lookup('ansible.builtin.vars', __t_var) is sequence"
    success_msg: "Variable '{{ __t_var }}' defined properly"
    fail_msg: "Variable '{{ __t_var }}' failed to validate"
    quiet: '{{ _sat_quiet_assert }}'
  loop:
    - '_sat_hosts'
  loop_control:
    loop_var: '__t_var'
...
